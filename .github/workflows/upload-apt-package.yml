name: Upload APT package to Azure storage account

on:
workflow_dispatch:
inputs:
package_version:
description: 'Package version (leave empty to use latest)'
required: false
default: ''
  
schedule:
# Run at 8 AM UTC (9 AM BST) every day
- cron: '0 8 * * *'

jobs:
get-latest-version:
runs-on: windows-latest
outputs:
version: ${{ steps.set-version.outputs.version } }
steps:
- name: Check if version was provided
id: check-version
run: |
if (-not "${{ inputs.package_version }}") {
    echo "version_provided=false" >> $env:GITHUB_OUTPUT
} else {
    echo "version_provided=true" >> $env:GITHUB_OUTPUT
}

- name: Get latest version from SharePoint
if: steps.check-version.outputs.version_provided == 'false'
id: get-latest-version
shell: pwsh
env:
SHAREPOINT_USERNAME: ${{ secrets.SHAREPOINT_USERNAME } }
SHAREPOINT_PASSWORD: ${{ secrets.SHAREPOINT_PASSWORD } }
run: |
# Load SharePoint CSOM Assemblies
Add-Type -Path ".\csom\Microsoft.SharePointOnline.CSOM\lib\net45\Microsoft.SharePoint.Client.dll"
Add-Type -Path ".\csom\Microsoft.SharePointOnline.CSOM\lib\net45\Microsoft.SharePoint.Client.Runtime.dll"

# Set parameter values
$SiteURL = "https://apps.jci.com/sites/1VMSEngineering"
$FolderRelativeUrl = "Shared Documents/OSP-Repo"
          
# Setup Credentials to connect
$username = $env:SHAREPOINT_USERNAME
$password = $env:SHAREPOINT_PASSWORD
$securePassword = ConvertTo-SecureString -String $password -AsPlainText -Force
$Credentials = New-Object Microsoft.SharePoint.Client.SharePointOnlineCredentials($username, $securePassword)
          
# Setup the context
$Ctx = New-Object Microsoft.SharePoint.Client.ClientContext($SiteURL)
$Ctx.Credentials = $Credentials
          
# Get the folder
$Folder = $Ctx.Web.GetFolderByServerRelativeUrl($FolderRelativeUrl)
$Ctx.Load($Folder)
$SubFolders = $Folder.Folders
$Ctx.Load($SubFolders)
$Ctx.ExecuteQuery()
          
# Get all version folders and sort by name (version) descending
$VersionFolders = $SubFolders | Where-Object { $_.Name -match '^\d+\.\d+\.\d+\.\d+$' } | Sort-Object { [version]$_.Name } -Descending
          
if ($VersionFolders.Count -gt 0) {
    $latestVersion = $VersionFolders[0].Name
    Write-Output "Latest version found: $latestVersion"
    echo "version=$latestVersion" >> $GITHUB_OUTPUT
} else {
    Write-Error "No version folders found in SharePoint"
    exit 1
}

- name: Set version to use
id: set-version
shell: pwsh
run: |
if ("${{ steps.check-version.outputs.version_provided }}" -eq "true") {
    echo "version=${{ inputs.package_version }}" >> $env:GITHUB_OUTPUT
} else {
    echo "version=${{ steps.get-latest-version.outputs.version }}" >> $env:GITHUB_OUTPUT
}

upload-repo:
needs: get-latest-version
runs-on: windows-latest

env:
AZURE_STORAGE_ACCOUNT: ospupdatesnonprod
AZURE_STORAGE_KEY: ${{ secrets.STORAGE_ACCOUNT_KEY } }
SHAREPOINT_USERNAME: ${{ secrets.SHAREPOINT_USERNAME } }
SHAREPOINT_PASSWORD: ${{ secrets.SHAREPOINT_PASSWORD } }
PACKAGE_VERSION: ${{ needs.get-latest-version.outputs.version } }

steps:
- name: Checkout repository
uses: actions/checkout@v4

- name: Install Azure CLI
uses: azure/setup-azure@v3
with:
version: latest

- name: Generate Random UUID
id: get-uuid
run: echo "uuid=$(uuidgen)" >> $GITHUB_OUTPUT

- name: Storage container name construct
id: container-name
run: |
$version = ($env:PACKAGE_VERSION) -replace "\.", "-"
$container_name = "osp-repo-${version}-${{ steps.get-uuid.outputs.uuid }}"
echo "container_name=$container_name" >> $GITHUB_OUTPUT

- name: Create Storage container
run: |
az storage container create --name ${{ steps.container-name.outputs.container_name } } --account-name $AZURE_STORAGE_ACCOUNT --account-key $AZURE_STORAGE_KEY --public-access blob

- name: Download CSOM DLLs
run: |
Invoke-WebRequest https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile .\nuget.exe
.\nuget.exe install Microsoft.SharePointOnline.CSOM -OutputDirectory .\csom

- name: Copy CSOM DLLs
run: |
$csomPath = Get-ChildItem -Path ".\csom" -Filter "Microsoft.SharePointOnline.CSOM.*" | Select-Object -First 1
Copy-Item "$($csomPath.FullName)\lib\net45\*.dll" -Destination "." -Recurse -Force

- name: Download files from sharepoint
shell: pwsh
run: |
# Load SharePoint CSOM Assemblies
Add-Type -Path ".\Microsoft.SharePoint.Client.dll"
Add-Type -Path ".\Microsoft.SharePoint.Client.Runtime.dll"
        
Function Download-SPOFolder() {
    param(
        [Parameter(Mandatory = $true)] [string] $SiteURL,
        [Parameter(Mandatory = $true)] [Microsoft.SharePoint.Client.Folder] $SourceFolder,
        [Parameter(Mandatory = $true)] [string] $TargetFolder
    )
    Try {
        # Create Local Folder
        $LocalFolder = "$TargetFolder\$($env:PACKAGE_VERSION)"
        If (!(Test-Path -Path $LocalFolder)) {
            New-Item -ItemType Directory -Path $LocalFolder | Out-Null
        }
                
        # Get all Files from the folder
        $FilesColl = $SourceFolder.Files
        $Ctx.Load($FilesColl)
        $Ctx.ExecuteQuery()
        
        # Iterate through each file and download
        Foreach ($File in $FilesColl) {
            $TargetFile = "$LocalFolder\$($File.Name)"
            $FileInfo = [Microsoft.SharePoint.Client.File]::OpenBinaryDirect($Ctx, $File.ServerRelativeURL)
            $WriteStream = [System.IO.File]::Open($TargetFile, [System.IO.FileMode]::Create)
            $FileInfo.Stream.CopyTo($WriteStream)
            $WriteStream.Close()
            Write-Host -ForegroundColor Green "Downloaded File: $TargetFile"
        }
                
        # Process Sub Folders
        $SubFolders = $SourceFolder.Folders
        $Ctx.Load($SubFolders)
        $Ctx.ExecuteQuery()
        Foreach ($Folder in $SubFolders) {
            If ($Folder.Name -ne "Forms") {
                Download-SPOFolder -SiteURL $SiteURL -SourceFolder $Folder -TargetFolder $TargetFolder
            }
        }
    }
    Catch {
        Write-Host -ForegroundColor Red "Error Downloading Folder!" $_.Exception.Message
        exit 1
    }
}

# Set parameter values
$SiteURL = "https://apps.jci.com/sites/1VMSEngineering"
$FolderRelativeUrl = "Shared Documents/OSP-Repo/$($env:PACKAGE_VERSION)"
$TargetFolder = "C:\Temp"
        
# Setup Credentials to connect
$username = $env:SHAREPOINT_USERNAME
$password = $env:SHAREPOINT_PASSWORD
$securePassword = ConvertTo-SecureString -String $password -AsPlainText -Force
$Credentials = New-Object Microsoft.SharePoint.Client.SharePointOnlineCredentials($username, $securePassword)
        
# Setup the context
$Ctx = New-Object Microsoft.SharePoint.Client.ClientContext($SiteURL)
$Ctx.Credentials = $Credentials
        
# Get the Folder
$SourceFolder = $Ctx.Web.GetFolderByServerRelativeUrl($FolderRelativeUrl)
$Ctx.Load($SourceFolder)
$Ctx.ExecuteQuery()
        
# Call the function to download the Folder
Download-SPOFolder -SiteURL $SiteURL -SourceFolder $SourceFolder -TargetFolder $TargetFolder

- name: Extract tar file
run: |
tar -xf "C:\Temp\${{ env.PACKAGE_VERSION }}\osp-repo-${{ env.PACKAGE_VERSION }}.tar" -C "C:\Temp\${{ env.PACKAGE_VERSION }}\"

- name: Read content of GPG and json file into variable
run: |
$REPO_GPG = Get-Content -Path "C:\Temp\${{ env.PACKAGE_VERSION }}\repo.gpg" -Raw
$REPO_JSON = Get-Content -Path "C:\Temp\${{ env.PACKAGE_VERSION }}\repo.json" -Raw
echo "REPO_GPG=$REPO_GPG" >> $GITHUB_ENV
echo "REPO_JSON=$REPO_JSON" >> $GITHUB_ENV

- name: Delete GPG and json file
run: |
Remove-Item -Path "C:\Temp\${{ env.PACKAGE_VERSION }}\osp-repo\repo.gpg" -Force
Remove-Item -Path "C:\Temp\${{ env.PACKAGE_VERSION }}\osp-repo\repo.json" -Force

- name: Upload files to blob container
shell: pwsh
run: |
az storage blob upload-batch --destination ${{ steps.container-name.outputs.container_name } } --account-name $env:AZURE_STORAGE_ACCOUNT --account-key $env:AZURE_STORAGE_KEY --source "C:\Temp\$($env:PACKAGE_VERSION)\osp-repo\" --output none

# List uploaded files
Write-Output "Uploaded files:"
Get-ChildItem -Path "C:\Temp\$($env:PACKAGE_VERSION)\osp-repo\" -Recurse -File | ForEach-Object {
    $blobName = $_.FullName.Replace("C:\Temp\$($env:PACKAGE_VERSION)\osp-repo\", "").Replace("\", "/")
    Write-Output "https://$($env:AZURE_STORAGE_ACCOUNT).blob.core.windows.net/${{ steps.container-name.outputs.container_name }}/$blobName"
}

- name: Output container information
run: |
echo "Package version: ${{ env.PACKAGE_VERSION }}"
echo "Container name: ${{ steps.container-name.outputs.container_name }}"
echo "Container URL: https://${{ env.AZURE_STORAGE_ACCOUNT }}.blob.core.windows.net/${{ steps.container-name.outputs.container_name }}"
